2.1.1 DNS:
//faire un schéma de ce qui se passe quand on veut se connecter la première au site   

Lors de la première connexion vers screego.net ou app.screego.net , le naviguateur envoie une requête DNS de type HTTPS afin de vérifier s'il un enregistrement spécifique pour HTTPS qui existe sur pour le domaine en question.
Le serveur DNS (ou résolveur) ne renvoie pas directement un record HTTPS , mais plutôt un enregistrement SOA (Start of Authority) indiquant que le serveur d'autorité est curitiba.ns.porkbun.com.
Ensuite il y a une autre requête qui est envoyé de type A pour obtenir l'adresse ipv4 du site. La réponse nous fournit une ou plusieurs adresses comme celle ci ( 49.13.207.241).
De manière une autre requête de type AAAA est envoyé. Elle fait exactement la même chose que la requête de type A mais ici on récupère l'ipv6 du site.Nous obtenons cette adresse ci : 2a01:4f8:1c1e:6364::1
À ce stade là , nous observons que l'application préfère les ipv6 que les ipv4.




==============================
2.1.2 Couche réseau


//quelles méthodes sont utilisés pour connecter en peer to peer ?

l'application utilise une combinaison de techniques pour la traversée de NAT. La combinaison est STUN/TURN ,cela aide à la décentralisation du "server-client"
les users jouent le rôle de "client-serveur" en même temps.
OK ! C est quoi STUN et TURN ? : C 'est un service de connexion qui aide à contourner les différents problèmes de NAT 
STUN : est utilisé pour découvrir les adresses ip externe d'un client derrière un NAT et permet à 2 clients de communiquer ensemble. Souvent utilisé pour une connexion UDP entre 2 hôtes.
TURN :TURN (Traversal Using Relays around NAT) est un protocole qui aide à traverser les traducteurs d'adresses réseau (NAT) ou les pare-feu afin de faciliter les communications d'égal à égal

MDNS: \\EXTENSIONS\\
MDNS nous sert à découvrir les participants et connaître la confiugration du réseau local.
Il convertit le noms des hôtes en adresse ip . Mais bon on pense qu'ici nos paquets mdns viennent du naviguateur firefox car nous avons des adresses ip que nous avons vu auparavant.

ARP:  Protocole qui permet d'associer l'adresse de protocole de couche réseau  d'un hôte distant ,  à son adresse de protocole de couche de liaison. typiquement adresse MAC    

==============================
2.1.3 Couche transport

Screego utilise plusieurs protocoles de transport pour optimiser la transmission de données.
Nous avons remarquer que l'application utilisait UDP , TCP/RTCP et QUIC pour assurer une bonne diffusion du flux de partage d'écran.
Il y a aussi des paquets MDNS pour la découverte des hôtes en réseau local.



Donc UDP: 
UDP ne nécessite pas de HANDSHAKE comme pour tls , tcp ou QUIC. 

Souvent utilisé dans les communications assez sensibles au facteur de temps comme le streaming , où il est préférable d'abandonner les paquets au lieu de les attendre.
Par exemple VoIP: Voice over IP utilise UDP , en effet la conversation téléphonique doit être claire et non différée. Donc Screego tolère les paquets perdus ou les doublons ,
d'ailleurs en parlant de doublons nous avons lancé le scrypt "doublon_udp_quic.py" nous avons constaté qu'il y a un nombre total de doublons UDP détectés : 24720
Nombre total de doublons QUIC détectés : 3

Donc pour résumé UDP  il est moins fiable mais dans le cas de l'application Screego il est plus souvent utilisé que TCP , en raison de sa faible latence.


QUIC: QUIC apporte des améliorations significatives , il offre un TLS plus rapide ( 6 messages à 3 messages) , une retransmission des paquets perdus , chiffrement plus complet et un multiplexage 
grâce à des numéros de séquence unique.
avec QUIC si nous augmentons le nombre d'utilisateurs par exemple à 3 grâce à son contrôle de congestion et son multiplexage . QUIC sera maintenir la qualité de service en adaptant le débit.


TCP :
Ici dans Screego , TCP est utilisé pour la signalisation et l'établissement de la connexion.
Quand nous démarrons le partage d'écran , TCP va nous servir dans ce cas bien précis , à échanger les messages de négociations , de contrôle et d'authentification entre les pairs.

Et pour RTCP: Généralement utilisé en complément du protocole de transport de données en temps réel. Son rôle est de fournir des informations de contrôle sur la qualité du flux: il collecte les statistiques , mesurela latence et assure la synchronisation entre les différents flux .
Ce protocole aide à garder une fluidité pour le partage d'écran et de maintenir dynamiquement le débit.



==============================
2.1.4 Chiffrement et sécurité:  voir partie ilyasse




==============================
2.1.5 Applications :


Pour du partage d’écran, comment l’application se comporte-t-elle lorsque plusieurs uti-
lisateurs regardent le même écran ?

?:(metch networking) : Dans un environnement peer-to-peer comme celui de Screego, il n'est pas optimal que le diffuseur principal envoie le flux de partage d’écran directement à chaque spectateur. Pour alléger la charge sur l'émetteur, les récepteurs peuvent également participer à la diffusion du flux.
Autrement dit, une fois qu'un utilisateur reçoit le flux, il peut le retransmettre à d'autres participants. Ce mécanisme, qui ressemble à un maillage (mesh networking) ou à une distribution par relais entre pairs, permet de répartir la charge de la bande passante et d'améliorer la scalabilité du service, surtout lorsque le nombre d'utilisateurs augmente.


Screego a une architecture peer to peer optimisée. QUIC va envoyer simultanément le même flux chiffré à plusieurs destinataires
Le flux est reçu en temps réel de manière efficace. Ce qui minimise l'impact sur la latence et garantit une synchronisation entre les participants.

Pour du partage d’écran, l’application se comporte-t-elle différemment lorsque le flux vidéo
devient plus important (par exemple lorsque l’écran subit beaucoup de modifications) ?
— Pour du partage d’écran, est-ce que la qualité vidéo s’adapte au débit de la connexion
internet ?      

Screego détecte l'augmentation de la charge visuelle et, en conséquence, le débit de données peut augmenter.
 Pour faire face à cette situation, l'application adapte le débit binaire du flux vidéo, par exemple en ajustant la compression ou la fréquence d'image. Si le réseau dispose d'une bonne bande passante, la qualité peut rester élevée, mais si le débit disponible diminue, l'application réduit la qualité pour maintenir une fluidité d'affichage. Ce mécanisme d'adaptation, souvent appelé « adaptation au débit » ou « adaptive bitrate streaming »,
permet de conserver une expérience de partage d'écran acceptable même lorsque le contenu change rapidement.

Au niveau de UDP : il y aura de plus en plus de paquets et la taille des paquets va augmenter pour transmettre de plus en plus d'informations.
Cependant si le réseau est limité , screego peut limiter la taille des paquets pour éviter l'encombrement et la perte de paquets avec des données importantes.

Au niveau de QUIC : puisqu'il contient une option pour le contrôle de congestion , il peut détecter rapidement une augmentation du trafic et adapter le rythme d'envoi. Cela empêche une dégradation de la vidéo.



===================
EXTENSIONS: pour les slides : ===================
EXTENSIONS: pour les slides :

Attention nous avons remarqués que si nous augmentons le nombre d'utilisateurs cela va nous mener à une augmentation des latences , surtout si la bande passante ou le serveur n'est pas adpater pour.
Quand nous avons effectuons le test avec 3 utilisateurs j'ai remarqué au début un petit lag d'écran. Ce qui devient plus compliqué à traverser la couche NAT.


Durant notre analyse DNS nous avons également observés  des comportements inattendus ; comme des résolutions dns pour d'autres sites. Cela est du à la barre de favoris de notre naviguateur ici Firefox.Nous avons également du'atres résolutions pour le service de sécurité de notre naviguateur.

Thomas avait oublié de désactiver son google home , donc il y a eu des paquets "BROADCAST" dans la capture solo wifi.



============== pour la présentation=========

=============STUN=============slide n°13:



Un serveur STUN (Session Traversal Utilities for NAT) aide les appareils à découvrir leur adresse IP publique et leur port lorsqu'ils se trouvent derrière un NAT. 
Ces informations sont essentielles pour établir une connexion d'égal à égal.

Principales caractéristiques des serveurs STUN :

Découverte de l'IP publique : Les serveurs STUN révèlent l'adresse IP et le port publics d'un appareil.
Utilisation légère des ressources : Ces serveurs gèrent des demandes et des réponses simples.
Permet des connexions directes : Fonctionne efficacement lorsque les NAT ou les pare-feu ne sont pas très restrictifs.
Rôle dans l'ICE : Utilisé pendant le processus ICE (établissement interactif de la connectivité) pour rassembler les candidats à la connexion.

Exemple de cas d'utilisation :

Alice et Bob veulent lancer un appel vidéo. Tous deux se trouvent derrière des NAT, mais leurs réseaux permettent des connexions directes dès lors qu'ils connaissent leurs IP et ports publics. Un serveur STUN les aide à découvrir ces informations et à établir une connexion d'égal à égal sans relais.
Limites du STUN :
 Ne convient pas aux NATs restrictifs : Les NAT symétriques ou les pare-feu stricts peuvent bloquer les connexions directes, ce qui rend le STUN insuffisant.



/*pour le MITM : 
Par exemple, imaginons qu'un attaquant intercepte ou observe la communication entre un client et un serveur STUN. Plutôt que d'attendre la réponse légitime du serveur, l'attaquant peut injecter une réponse STUN falsifiée (spoofée) dans laquelle il indique une adresse IP et un port de son choix, plutôt que ceux réellement assignés par le NAT. 

Ainsi, le client, pensant recevoir une réponse authentique, utiliserait ces informations erronées pour établir sa connexion. Cela pourrait permettre à l'attaquant de rediriger ou intercepter le trafic ultérieur, facilitant par exemple une attaque de type man-in-the-middle. 

Ce scénario met en évidence une vulnérabilité de STUN : en l'absence de mécanismes de vérification robustes ou d'authentification (que l'on trouve davantage dans TURN), il est plus facile de réaliser une attaque par spoofing sur les échanges STUN.


*/

=============TURN=============slide n°14:




If not STUN -> TURN: Quand deux clients ne parviennent pads à établir une connexion directe via STUN , dans ils se rabattent sur TURN pour relayer le trafic via une serveur intermédiaire.

NAT COMPLEXES : Certains NAT empĉhent les connexions directes. Donc les croix rouges sur le schéma ,même s'il y a eu une découverte d'adresse publique via STUN.

Disponible :Ce qui est bien avec TURN c est que la roue de secours en cas d'échec , il est disponible directement car avant tout c est une extension de STUN.

Inconvénient : Un inconvénient chez TURN est l'utilisation de la bande passante , il l'en consomme énormément , plus que le protocole STUN.
C est pourquoi le protocole ICE impose l'utilisation du protocole STUN en premier recours , et l'utilisation du protocole TURN en cas d'échec avec le NAT ou d'autres situations où le protocole  STUN ne peut pas être déployer.



EXEMPLE:


Dans un premier temps , le client contacte un serveur turn avec une requête "Allocate": ça demande au serveur TURN d'allouer une partie de ses ressources pour que le client arrive à contacter sa pair.


Si le serveur Turn accepte alors ,il attribue une adresse relai (XOR-RELAYED-ADDRESS) au client et sert de point de passage pour le trafic.

/*voir si des paquets comme dans l'article de wikipédia*/

Le serveur turn reçoit les données du client et les transmet au pair en utiliser UDP avec l'adresse XOR-RELAYED-ADDRESS.Le pair reçoit les données et répond tjrs avec UDP à l'adresse relais du serveur TURN.
En recevant les données de l'autre pair, il doit vérifier les permissions et si elles sont valides , et les transmet au client.
Ce processus permet de contourner les NAT qui symmétriques ou complexes.




========Peer to Peer : many users ======== slide n°16:


DETECTION augmentation : Screego détecte l'augmentation de la charge visuelle et donc le dénit de donées peut augmenter.
Pour cette situation , l'app adapte le débit en appliquant certains algo de compression pour l'image ou la fréquence de l'image.
Généralement si le réseau a un bon débit , la qualité peut rester élevée 
mais si le débit disponible diminue ou est limité alors l'application réduit la qualité pour maintenir une fluidité d'affichage on appelle cela le "adaptive bitrate streaming" 


QUIC & UDP :  Pour UDP : il y aura de plus en plus depaquets et la taille des paquets va augmenter pour transmettre de + en + d'informations. Si le réseau est limité , screego peut réduire la taille des paquets mais en générer plus compensser la réduction de taille 
mais cela amène à plus de pertes et de doublons .


Mech Networking ? : Alors au début nous avons cru que Screego suivait le principe du réseau maillé , eh bien non car dans un réseau maillé ,chaque noeud a la capacité de relayer le trafic pour tous les autres une graphe entièrement connecté.
On pense que de manière générale dans un système peer to peer il peut quand même avoir un système de mech networking sauf qu'il y a une hiérarchie c est le client qui démarre le streaming.
/*monter la slide n°17 et expliquer*/
Mais Screego n'implémente pas ce genre de comportement, enfin nous avons rien remarqué de tel. 


Est ce que Screego fonctionne comme dans la slide n°17 ?