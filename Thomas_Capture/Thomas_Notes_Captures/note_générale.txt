2.1.1 DNS:
//faire un schéma de ce qui se passe quand on veut se connecter la première au site   

Lors de la première connexion vers screego.net ou app.screego.net , le naviguateur envoie une requête DNS de type HTTPS afin de vérifier s'il un enregistrement spécifique pour HTTPS qui existe sur pour le domaine en question.
Le serveur DNS (ou résolveur) ne renvoie pas directement un record HTTPS , mais plutôt un enregistrement SOA (Start of Authority) indiquant que le serveur d'autorité est curitiba.ns.porkbun.com.
Ensuite il y a une autre requête qui est envoyé de type A pour obtenir l'adresse ipv4 du site. La réponse nous fournit une ou plusieurs adresses comme celle ci ( 49.13.207.241).
De manière une autre requête de type AAAA est envoyé. Elle fait exactement la même chose que la requête de type A mais ici on récupère l'ipv6 du site.Nous obtenons cette adresse ci : 2a01:4f8:1c1e:6364::1
À ce stade là , nous observons que l'application préfère les ipv6 que les ipv4.

Durant notre analyse DNS nous avons également observés  des comportements inattendus ; comme des résolutions dns pour d'autres sites. Cela est du à la barre de favoris de notre naviguateur ici Firefox.Nous avons également du'atres résolutions pour le service de sécurité de notre naviguateur.



==============================
2.1.2 Couche réseau


//quelles méthodes sont utilisés pour connecter en peer to peer ?

l'application utilise une combinaison de techniques pour la traversée de NAT. La combinaison est STUN/TURN ,cela aide à la décentralisation du "server-client"
les users jouent le rôle de "client-serveur" en même temps.
OK ! C est quoi STUN et TURN ? : C 'est un service de connexion qui aide à contourner les différents problèmes de NAT 
STUN : est utilisé pour découvrir les adresses ip externe d'un client derrière un NAT et permet à 2 clients de communiquer ensemble. Souvent utilisé pour une connexion UDP entre 2 hôtes.
TURN : protocole qui permet de recevoir des données entrantes derrière un NAT ou un pare-feu via une connexion TCP-UDP. C est un peu un serveur STUN avancé, sauf que TURN est utilisé si la connexion directe est impossbile
donc cela transforme la connexion peer to peer en connexion client serveur.

MDNS: \\EXTENSIONS\\
MDNS nous sert à découvrir les participants et connaître la confiugration du réseau local.
Il convertit le noms des hôtes en adresse ip . Mais bon on pense qu'ici nos paquets mdns viennent du naviguateur firefox car nous avons des adresses ip que nous avons vu auparavant.


ARP:  Protocole qui permet d'associer l'adresse de protocole de couche réseau  d'un hôte distant ,  à son adresse de protocole de couche de liaison. typiquement adresse MAC    

==============================
2.1.3 Couche transport

Screego utilise plusieurs protocoles de transport pour optimiser la transmission de données.
Nous avons remarquer que l'application utilisait UDP , TCP/RTCP et QUIC pour assurer une bonne diffusion du flux de partage d'écran.
Il y a aussi des paquets MDNS pour la découverte des hôtes en réseau local.



Donc UDP: 
UDP ne nécessite pas de HANDSHAKE comme pour tls , tcp ou QUIC. 

Souvent utilisé dans les communications assez sensibles au facteur de temps comme le streaming , où il est préférable d'abandonner les paquets au lieu de les attendre.
Par exemple VoIP: Voice over IP utilise UDP , en effet la conversation téléphonique doit être claire et non différée. Donc Screego tolère les paquets perdus ou les doublons ,
d'ailleurs en parlant de doublons nous avons lancé le scrypt "doublon_udp_quic.py" nous avons constaté qu'il y a un nombre total de doublons UDP détectés : 24720
Nombre total de doublons QUIC détectés : 3

Donc pour résumé UDP  il est moins fiable mais dans le cas de l'application Screego il est plus souvent utilisé que TCP , en raison de sa faible latence.


QUIC: QUIC apporte des améliorations significatives , il offre un TLS plus rapide ( 6 messages à 3 messages) , une retransmission des paquets perdus , chiffrement plus complet et un multiplexage 
grâce à des numéros de séquence unique.
avec QUIC si nous augmentons le nombre d'utilisateurs par exemple à 3 grâce à son contrôle de congestion et son multiplexage . QUIC sera maintenir la qualité de service en adaptant le débit.


TCP :
Ici dans Screego , TCP est utilisé pour la signalisation et l'établissement de la connexion.
Quand nous démarrons le partage d'écran , TCP va nous servir dans ce cas bien précis , à échanger les messages de négociations , de contrôle et d'authentification entre les pairs.

Et pour RTCP: Généralement utilisé en complément du protocole de transport de données en temps réel. Son rôle est de fournir des informations de contrôle sur la qualité du flux: il collecte les statistiques , mesurela latence et assure la synchronisation entre les différents flux .
Ce protocole aide à garder une fluidité pour le partage d'écran et de maintenir dynamiquement le débit.



==============================
2.1.4 Chiffrement et sécurité:  voir partie ilyasse




==============================
2.1.5 Applications :


Pour du partage d’écran, comment l’application se comporte-t-elle lorsque plusieurs uti-
lisateurs regardent le même écran ?

Pour du partage d’écran, l’application se comporte-t-elle différemment lorsque le flux vidéo
devient plus important (par exemple lorsque l’écran subit beaucoup de modifications) ?
— Pour du partage d’écran, est-ce que la qualité vidéo s’adapte au débit de la connexion
internet ?


Attention nous avons remarqués que si nous augmentons le nombre d'utilisateurs cela va nous mener à une augmentation des latences , surtout si la bande passante ou le serveur n'est pas adpater pour.
Quand nous avons effectuons le test avec 3 utilisateurs j'ai remarqué au début un petit lag d'écran. Ce qui devient plus compliqué à traverser la couche NAT.



===================
EXTENSIONS: pour les slides : 
